@using BlazorApp1.Data.Models
@using BlazorApp1.Data.Services
@inject NotificationService notificationservice
@inject CustomerService customerService
@inject NavigationManager NavigationManager
@page "/crud"
@inject IJSRuntime js
<div class="container-fluid">
	<div class="card">
		<div class="card-body">
			<EditForm Model="ValueCustomer">
				<div class="row">
					<div class="col-xs-12 col-md-6 col-lg-6">
						<label>ชื่อลูกค้า :</label>
						<br />
						<InputText @bind-Value="ValueCustomer.cust_name" style="width:100%;"></InputText>
					</div>
					<div class="col-xs-12 col-md-6 col-lg-6">
						<label>ที่อยู่ลูกค้า :</label>
						<br />
						<InputTextArea @bind-Value="ValueCustomer.cust_address" style="width:100%;"></InputTextArea>
					</div>
					<div class="col-xs-12 col-md-6 col-lg-6">
						<label>รหัสไปรษณีย์ลูกค้า :</label>
						<br />
						<InputText @bind-Value="ValueCustomer.cust_postcode" style="width:100%;" maxlength="5"></InputText>
					</div>
					<div class="col-xs-12 col-md-6 col-lg-6">
						<label>เบอร์โทรศัพท์ :</label>
						<br />
						<InputText @bind-Value="ValueCustomer.cust_phone" style="width:100%;" maxlength="10"></InputText>
					</div>
					<div class="col-xs-12 col-md-6 col-lg-6">
						<label>เบอร์โทรแฟกซ์ :</label>
						<br />
						<InputText @bind-Value="ValueCustomer.cust_fax" style="width:100%;" maxlength="10"></InputText>
					</div>
					<div class="col-xs-12 col-md-6 col-lg-6">
						<label>อีเมล :</label>
						<br />
						<InputText @bind-Value="ValueCustomer.cust_email" style="width:100%;"></InputText>
					</div>

				</div>
				<div class="row mt-2">
					<div class="col-xs-12 col-md-6 col-lg-4">
						<button @onclick="OnSave" class="btn btn-primary" style="width:100%;">บันทึก</button>
					</div>
					<div class="col-xs-12 col-md-6 col-lg-4">
						<button @onclick="OnEdit" class="btn btn-warning" style="width:100%;">แก้ไข</button>
					</div>
					<div class="col-xs-12 col-md-6 col-lg-4">
						<button class="btn btn-danger" style="width:100%;" data-bs-toggle="modal" data-bs-target="#ModalDelete">ลบ</button>
					</div>
				</div>
			</EditForm>
		</div>
		<table class="table table-striped-columns">
			<thead>
				<tr>
					<th>รหัสลูกค้า</th>
					<th>ชื่อลูกค้า</th>
					<th>ที่อยู่ลูกค้า</th>
					<th>รหัสไปรษณีย์</th>
					<th>เบอร์โทรศัพท์</th>
					<th>เบอร์แฟกซ์</th>
					<th>อีเมล</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var customer in ListCustomer)
				{
					<tr style="cursor:pointer;" @onclick="()=>SentValue(customer)">

						<td>CUS--@customer.cust_id</td>
						<td>@customer.cust_name</td>
						<td>@customer.cust_address</td>
						<td>@customer.cust_postcode</td>
						<td>@customer.cust_phone</td>
						<td>@customer.cust_fax</td>
						<td>@customer.cust_email</td>

					</tr>
				}
			</tbody>
		</table>
	</div>
</div>
<button class="btn btn-primary mt-5" @onclick="OnPagePrint" data-bs-toggle="modal" data-bs-target="#PrintDiv">พิมพ์</button>

<div class="modal fade" id="ModalDelete" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel"><i class="fa-sharp fa-solid fa-circle-check text-success"></i> กรุณายืนยันคำสั่ง</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<div class="" style="text-align:center;">
					คุณต้องการที่จะลบพนักงาน @ValueCustomer.cust_name ใช่ หรือ ไม่ ?
				</div>


			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
				<button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="()=>OnDeleteCustomer(ValueCustomer)">ยืนยัน</button>
			</div>
		</div>
	</div>
</div>
<div class="" style="margin-left:35%;">
	@if (ShowPrint == true)
	{
		<div class="PrintShowout bg-black bg-opacity-50 d-flex justify-content-center " style="position:absolute;z-index:35;">
			<div class="row mb-2 d-inline-flex justify-content-end position-relative" style="bottom:-20%;left:80%;">
			</div>
			<div class="bg-white PrintShowin" style="position:relative; top:55%;">
				<div class="card">
					<div class="card-header">
						<div class="row">
							<div class="col">
								<i class="fa-solid fa-print"></i>
								สั่งพิมพ์
							</div>
							<div class="col" style="text-align:end;">
								<button class="btn btn-close" @onclick="OnCloseShowPrint"></button>
							</div>
						</div>


					</div>
					<div class="card-body d-flex justify-content-center align-items-center " style="position:relative;top:30px;">
						<div class="row">
							<div class="col" style="text-align:center;">
								<div class="" id="PrintDiv">
									@html
								</div>
							</div>
						</div>


					</div>
					<div class="card-footer" style="margin-top:45px;">
						<div class="" style="text-align:end; ">
							<button type="button" class="btn btn-primary" @onclick="Print">สั่งพิมพ์</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	}
</div>
@code {
	public List<Customer> ListCustomer = new List<Customer>();
	private Customer ModelCust = new();
	private Customer? ValueCustomer = new();
	private bool ShowPrint = false;
	protected override async Task OnInitializedAsync()
	{

		var Customers = await customerService.GetCustomerAsync();
		foreach (var Customer in Customers)
		{
			ListCustomer.Add(new Customer().ToUi(Customer));

		}
	}

	private async Task OnSave()
	{

		string Inputcust_name = ModelCust.cust_name;
		string Inputcust_address = ModelCust.cust_address;
		string Inputcust_postcode = ModelCust.cust_postcode;
		string Inputcust_phone = ModelCust.cust_phone;
		string Inputcust_fax = ModelCust.cust_fax;


		if (ValueCustomer == null) return;
		if (ValueCustomer.cust_name == null || ValueCustomer.cust_address == null || ValueCustomer.cust_postcode == null || ValueCustomer.cust_phone == null || ValueCustomer.cust_fax == null)
		{
			ShowNotificationErrorInput();
			return;
		}
		if (ValueCustomer.cust_name != null || ValueCustomer.cust_address != null || ValueCustomer.cust_postcode != null || ValueCustomer.cust_phone != null || ValueCustomer.cust_fax != null)
		{
			ValueCustomer.cust_id = 0;

			var AddCustomer = new Customer().ToTable(ValueCustomer);
			customerService.AddNewCustomer(AddCustomer); //บันทึกข้อมูล

			//Customer CreateListCustomer = new Customer()
			//	{
			//		cust_id = AddCustomer.cust_id,
			//		cust_name = AddCustomer.cust_name,
			//		cust_address = AddCustomer.cust_address,
			//		cust_postcode = AddCustomer.cust_postcode,
			//		cust_fax = AddCustomer.cust_fax,
			//		cust_email = AddCustomer.cust_email,
			//	};

			var Customers = await customerService.GetCustomerAsync();
			ListCustomer.Clear();
			foreach (var Customer in Customers)
			{
				ListCustomer.Add(new Customer().ToUi(Customer));

			}

			ValueCustomer.cust_name = "";
			ValueCustomer.cust_address = "";
			ValueCustomer.cust_postcode = "";
			ValueCustomer.cust_phone = "";
			ValueCustomer.cust_fax = "";
			ValueCustomer.cust_email = "";
			ShowNotificationSuccess();

		}
	}
	private Task OnMemberCustomer(Customer id)
	{

		ListCustomer.Add(id);
		return Task.CompletedTask;

	}
	private void SentValue(Customer? ID)
	{
		ValueCustomer = ID;
		ModelCust.cust_name = ID.cust_name;
		ModelCust.cust_address = ID.cust_address;
		ModelCust.cust_postcode = ID.cust_postcode;
		ModelCust.cust_phone = ID.cust_phone;
		ModelCust.cust_fax = ID.cust_fax;
		ModelCust.cust_email = ID.cust_email;

	}
	private async Task OnEdit()
	{

		string Inputcust_name = ValueCustomer.cust_name;
		string Inputcust_address = ValueCustomer.cust_address;
		string Inputcust_postcode = ValueCustomer.cust_postcode;
		string Inputcust_phone = ValueCustomer.cust_phone;
		string Inputcust_fax = ModelCust.cust_fax;


		if (ModelCust == null) return;
		if (ModelCust.cust_name == null || ModelCust.cust_address == null || ModelCust.cust_postcode == null || ModelCust.cust_phone == null || ModelCust.cust_fax == null)
		{
			ShowNotificationErrorInput();
			return;
		}
		if (ModelCust.cust_name != null || ModelCust.cust_address != null || ModelCust.cust_postcode != null || ModelCust.cust_phone != null || ModelCust.cust_fax != null)
		{

			@foreach (var Employee in ListCustomer.FindAll(e => e.cust_id == ValueCustomer.cust_id))
			{
				ModelCust.cust_id = ValueCustomer.cust_id;
				ModelCust.cust_name = ValueCustomer.cust_name;
				ModelCust.cust_address = ValueCustomer.cust_address;
				ModelCust.cust_postcode = ValueCustomer.cust_postcode;
				ModelCust.cust_phone = ValueCustomer.cust_phone;
				ModelCust.cust_fax = ValueCustomer.cust_fax;
				ModelCust.cust_email = ValueCustomer.cust_email;
				var EditCustomer = new Customer().ToTable(ModelCust);
				customerService.EditEmployee(EditCustomer); //บันทึกข้อมูล
			}


			var Customers = await customerService.GetCustomerAsync();
			ListCustomer.Clear();
			foreach (var Customer in Customers)
			{
				ListCustomer.Add(new Customer().ToUi(Customer));

			}
			ShowNotificationSuccess();

		}
	}
	private async Task OnDeleteCustomer(Customer id)
	{
		ListCustomer.Remove(id); //ลบUI
		var DeleteCustomer = new Customer().ToTable(id);//ลบในSQL
		customerService.DeleteEmployee(DeleteCustomer);
	}
	private void ShowNotificationSuccess()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Success,
				Summary = "ระบบทำการบันทึกเรียบร้อยแล้ว",
				Detail = "",
				Duration = 2700,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}
	private void ShowNotificationErrorInput()
	{
		var a = new NotificationMessage
			{
				Severity = NotificationSeverity.Error,
				Summary = "กรูณากรอกข้อมูลให้ถูกต้อง",
				Detail = "",
				Duration = 2700,
				CloseOnClick = true,
				Payload = DateTime.Now
			};
		notificationservice.Notify(a);
	}


	public RenderFragment html;
	public async void OnPagePrint()
	{
		ShowPrint = !ShowPrint;
		var Reports = await customerService.GetCustomerAsync();
		ListCustomer.Clear();
		foreach (var Report in Reports)
		{
			ListCustomer.Add(new Customer().ToUi(Report));
		}
		RenderFragment CreateDynamicComponent() => builder =>
		{
			builder.OpenComponent(0, typeof(PrintViwer.RP_OrderSelect)); //ฟังก์ชั่นดึงไฟล์ที่เรียกมาแสดง

			builder.CloseComponent();
		};
		html = CreateDynamicComponent();
	}
	/****************************************************/
	public async Task Print()  //กดปริ้น
	{
		var Reports = await customerService.GetCustomerAsync();
		ListCustomer.Clear();
		foreach (var Report in Reports)
		{
			ListCustomer.Add(new Customer().ToUi(Report));
		}
		await js.InvokeVoidAsync("Print"); //ห้ามเปลี่ยนเด็ดขาด
	}
	/****************************************************/
	private async void RefreshData()
	{
		NavigationManager.NavigateTo($"/RP_ProfileProduct");
		NavigationManager.NavigateTo($"/crud");
	}
	public void OnCloseShowPrint()
	{
		ShowPrint = !ShowPrint;
	}
}
